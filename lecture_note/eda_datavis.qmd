---
title: "Basic Python Review"
format: html
lang: zh-TW
---




#df = pd.read_csv('../sample_data/DatasaurusDozen.csv')

## 前言


```{python}
import os
import pandas as pd
import numpy as np
```

## 敘述統計量

```{python}
iris_df = pd.read_csv('../sample_data/iris.csv')
print(iris_df.columns)
```

```{python}
# 連續型數值敘述統計量
iris_decs = iris_df[['Sepal.Length', 'Sepal.Width', 'Petal.Length', 'Petal.Width']].describe()
print(iris_decs)
```

```{python}
# 離散型數值敘述統計量 
print(iris_df['Species'].value_counts()) # 計數
print(iris_df['Species'].value_counts()*100/len(iris_df)) # 百分比
```


```{python}
# 連續型數值 "分組" 敘述統計量
iris_decs_grouped = iris_df.groupby('Species').describe()
print(iris_decs_grouped)
```


**註一**：執行分析專案時，常常需要儲存或暫存各式各樣的分析結果，包含資料敘述統計、各種視覺化圖表(寫報告用)、前處理過的資料、建好的模型(備份或供未來使用)，建議有個習慣，在專案程式碼開頭處，便指定好輸出路徑並給予一個變數名稱，例如底下範例 `outputPath = 'eda_output'`。

**註二**：另外，當程式碼搬移至別處或別台主機執行，常見需要輸出檔案時，找不到輸出路徑的困擾，建議若需輸出檔案，除了給予指定的路徑外，利用 `if not os.path.exists(outputPath):` 確認路徑是否存在，若不存在，則自動執行 `os.makedirs(outputPath)`，為指定的輸出路徑新建資料夾。
```{python}
# 當統計資訊過大，無法呈現於單一視窗時，可將分析結果儲存起來
outputPath = 'eda_output' # 請見以上註一
if not os.path.exists(outputPath): # 請見以上註二
    os.makedirs(outputPath) 
# 儲存 "分組" 敘述統計量結果
iris_decs_grouped.to_csv(os.path.join(outputPath, 'iris_decs_grouped.csv')) 
```







## Seaborn 資料視覺化

Seaborn

```{python}
import seaborn as sns
```

```{python}
#| echo: false
from matplotlib import pyplot as plt
```

### 直方圖 Histogram

```{python}
#| warning: false
#| fig-align: 'center'
sns.histplot(data=iris_df, x='Sepal.Length')
```


直方圖中最重要參數為 `bins` ，此參數決定直方圖的柱子數量與寬度，對呈現資料分布的精細度或粗糙度有直接影響，使用上須選擇合適的 `bins` 值設定，才能正確透過視覺化觀察資料。常見用法如下：

- 整數: 指定柱子數量。例如 `bins=10` 會將數據分成 10 組。
- 串列: 提供一個資料分組的邊界串列，明確指定每個柱子代表的資料範圍。例如 `bins=[0, 5, 10, 15]` 會將數據分別放入 $[0, 5)$、$[5, 10)$ 和 $[10, 15)$ 範圍內的柱子中。
- 自動計算: 此為 `bins` 的預設值，`bins='auto'`讓程式根據資料自動計算柱子數量。

以下範例對 Iris 資料的 `'Sepal.Length'` 分布，在分別設定不同的 `bins` 值之下，所呈現的圖形。
```{python}
#| echo: false
#| warning: false
#| fig-align: 'center'
fig_nr = 1
fig_nc = 3
bins_set = [10, 20, 50]
fig = plt.figure(figsize = (14, 4))
for i in range(3):
    ax = plt.subplot(fig_nr, fig_nc, i+1)
    hist = sns.histplot(data=iris_df, x='Sepal.Length', bins = bins_set[i])
    hist.set_title('Hist. with %d bins' % (bins_set[i]))
fig.show()
```


```{python}
#| warning: false
#| fig-align: 'center'
sns.histplot(data=iris_df, x='Sepal.Length', bins = 20, hue='Species')
```


```{python}
#| warning: false
#| fig-align: 'center'
sns.histplot(data=iris_df, x='Sepal.Length', bins = 20, hue='Species', kde=True)
```


### 盒鬚圖 Boxplot


```{python}
#| warning: false
#| fig-align: 'center'
sns.boxplot(data=iris_df, y='Sepal.Length')
```

```{python}
#| warning: false
#| fig-align: 'center'
sns.boxplot(data=iris_df, x='Species', y='Sepal.Length')
```


```{python}
#| warning: false
#| fig-align: 'center'
mtcars_df = pd.read_csv('../sample_data/mtcars.csv')
```

```{python}
#| warning: false
#| fig-align: 'center'
sns.boxplot(data=mtcars_df, x='cyl', y='disp', hue='am')
```

```{python}
#| warning: false
#| fig-align: 'center'
sns.violinplot(data=mtcars_df, x='cyl', y='disp', hue='am')
```


### 長條圖 Barplot


```{python}
#| warning: false
#| fig-align: 'center'
sns.countplot(data=mtcars_df, x='cyl')
```

```{python}
#| warning: false
#| fig-align: 'center'
sns.countplot(data=mtcars_df, x='cyl', hue='am')
```


### 趨勢圖 Line plot


```{python}
#| warning: false
#| fig-align: 'center'
longley_df = pd.read_csv('../sample_data/longley.csv')
print(longley_df.columns)
```

```{python}
#| warning: false
#| fig-align: 'center'
sns.lineplot(data=longley_df, x='Year', y='GNP.deflator')
```




### 散布圖 Scatter Plots 


```{python}
#| warning: false
#| fig-align: 'center'
sns.scatterplot(data=iris_df, x='Sepal.Length', y='Sepal.Width')
```

```{python}
#| warning: false
#| fig-align: 'center'
sns.scatterplot(data=iris_df, x='Sepal.Length', y='Sepal.Width', hue='Species')
```


### 等高線圖 Contour Plots 


```{python}
#| warning: false
#| fig-align: 'center'
sns.kdeplot(data=iris_df, x='Sepal.Length', y='Sepal.Width', hue='Species')
```



### 多欄圖型拼接

```{python}
#| warning: false
#| fig-align: 'center'
sns.pairplot(data=iris_df, hue='Species')
```


```{python}
#| warning: false
#| fig-align: 'center'
g = sns.PairGrid(data=iris_df, diag_sharey=False, hue='Species')
g.map_upper(sns.scatterplot)
g.map_lower(sns.kdeplot)
g.map_diag(sns.kdeplot)
```



### 熱圖 Heatmap 

```{python}
#| warning: false
#| fig-align: 'center'
volcano_df = pd.read_csv('../sample_data/volcano.csv')
print(volcano_df.columns)
```

```{python}
#| warning: false
#| fig-align: 'center'
print(volcano_df.head(10))
```

```{python}
#| warning: false
#| fig-align: 'center'
volcano_array = volcano_df.values # pandas.Dataframe -> numpy.array
print(volcano_array.shape)
```

```{python}
#| warning: false
#| fig-align: 'center'
sns.heatmap(data=volcano_array)
```


[https://matplotlib.org/stable/gallery/color/colormap_reference.html](https://matplotlib.org/stable/gallery/color/colormap_reference.html)
```{python}
#| echo: false
#| warning: false
#| fig-align: 'center'
fig = plt.figure(figsize = (11, 3))
ax = plt.subplot(1, 3, 1)
sns.heatmap(data=volcano_array, cmap='RdPu')
ax.set_title("cmap='RdPu'")
ax = plt.subplot(1, 3, 2)
sns.heatmap(data=volcano_array, cmap='YlGn')
ax.set_title("cmap='YlGn'")
ax = plt.subplot(1, 3, 3)
sns.heatmap(data=volcano_array, cmap='Spectral')
ax.set_title("cmap='Spectral'")
```



```{python}
#| warning: false
#| fig-align: 'center'
iris_var_columns = iris_df.columns[:4]
iris_corr_mat = iris_df[iris_var_columns].corr()
print(iris_corr_mat)
```


```{python}
#| warning: false
#| fig-align: 'center'
sns.heatmap(data=iris_corr_mat, cmap='seismic', center=0, vmin=-1, vmax=1)
```



### Bin plot

```{python}
#| warning: false
#| fig-align: 'center'
big_df = pd.read_csv('../sample_data/big_demo.csv')
print(big_df.columns)
```


```{python}
#| eval: false
#| warning: false
#| fig-align: 'center'
sns.histplot(data=big_df, x='X1', y='X2')
```

```{python}
#| echo: false
#| warning: false
#| fig-align: 'center'
fig = plt.figure(figsize = (12, 3))
ax = plt.subplot(1, 3, 1)
sns.scatterplot(data=big_df, x='X1', y='X2')
ax.set_title("Scatter Plot")
ax = plt.subplot(1, 3, 2)
sns.kdeplot(data=big_df, x='X1', y='X2')
ax.set_title("Contour Plot")
ax = plt.subplot(1, 3, 3)
sns.histplot(data=big_df, x='X1', y='X2')
ax.set_title("Bin Plot")
```




```{python}
#| warning: false
#| fig-align: 'center'
sns.jointplot(data=big_df, x='X1', y='X2', kind="hist")
```
```{python}
#| warning: false
#| fig-align: 'center'
sns.jointplot(data=big_df, x='X1', y='X2', kind="hex")
```





<!--
## Matplotlib 資料視覺化

```{python}
from matplotlib import pyplot as plt
```

基本 matplotlib 程式架構
```{python}
#| eval: false
# 以下為示範程式框架，勿執行!
# 決定圖形框架大小 (width, height) in inches
fig = plt.figure(figsize=(10, 8))
# 決定框架內圖形數量與排列 
# nrows, nolcs, index
ax = plt.subplot(1, 1, 1)
# ---------------------------------------
# 繪圖區
ax.plot(...); ax.hist(...); ax.bar(...);
ax.boxplot(...); ax.pie(...)
# ---------------------------------------
# 設定區
ax.set_title('Graph Title', fontsize = 22)
ax.set_ylabel('Label for Y-axis', fontsize = 20)
ax.set_xlabel('Label for X-axis', fontsize = 20)
ax.tick_params(labelsize = 18)
# ---------------------------------------
# 儲存圖片
fig.savefig('FILENAME.png')
# 以上須整段一次執行才能繪圖
```



### 直方圖 Histogram


`matplotlib` 中 `hist` 函數最重要參數為 `bins` ，此參數決定直方圖的柱子數量與寬度，對呈現資料分布的精細度或粗糙度有直接影響，使用上須選擇合適的 `bins` 值設定，才能正確透過視覺化觀察資料。常見用法如下：

- 整數: 指定柱子數量。例如 `bins=10` 會將數據分成 10 組。
- 串列: 提供一個資料分組的邊界串列，明確指定每個柱子代表的資料範圍。例如 `bins=[0, 5, 10, 15]` 會將數據分別放入 $[0, 5)$、$[5, 10)$ 和 $[10, 15)$ 範圍內的柱子中。
- 自動計算: 此為 `bins` 的預設值，`bins='auto'`讓 matplotlib 根據資料自動計算柱子數量。

以下範例為 Iris 資料中 `'Sepal.Length'` 的數值分布，且以預設的 `bins` 呈現。
```{python}
#| warning: false
#| fig-align: 'center'
fig = plt.figure(figsize = (4, 4))
ax = plt.subplot(1, 1, 1)
ax.hist(iris_df['Sepal.Length'])
ax.set_title('Histogram of %s' % ('Sepal.Length'))
ax.set_ylabel('Count')
ax.set_xlabel('Sepal.Length')
fig.show()
```

以下範例對 Iris 資料的 `'Sepal.Length'` 分布，在分別設定不同的 `bins` 值之下，所呈現的圖形。
```{python}
#| warning: false
#| fig-align: 'center'
fig_nr = 1
fig_nc = 3
bins_set = [10, 20, 50]
fig = plt.figure(figsize = (10, 3))
for i in range(3):
    ax = plt.subplot(fig_nr, fig_nc, i+1)
    ax.hist(iris_df['Sepal.Length'], bins = bins_set[i])
    ax.set_title('Hist. with %d bins' % (bins_set[i]))
    ax.set_ylabel('Count')
    ax.set_xlabel('Sepal.Length')
fig.show()
```

Iris 資料共有四個連續行數值欄位 `Sepal.Length` 、 `Sepal.Width` 、 `Petal.Length` 及 `Petal.Width`。
```{python}
#| warning: false
#| fig-align: 'center'
iris_columns = iris_df.columns[:4]
#
fig_nr = 2
fig_nc = 2
fig = plt.figure(figsize = (9, 8))
for i in range(len(iris_columns)):
    ax = plt.subplot(fig_nr, fig_nc, i+1)
    ax.hist(iris_df[iris_columns[i]], bins = 20)
    ax.set_title('Hist. of %s' % (iris_columns[i]))
    ax.set_ylabel('Count')
    ax.set_xlabel(iris_columns[i])
fig.show()
```


```{python}
#| warning: false
#| fig-align: 'center'
gb = iris_df.groupby('Species')

iris_group_df = [gb.get_group(ele)[iris_columns[0]] for ele in gb.groups]

#print(gb.get_group('setosa'))

fig = plt.figure(figsize = (9, 8))
ax = plt.subplot(1, 1, 1)
ax.hist(iris_group_df)
```

-->