---
title: "Linear Models"
format: 
    html:
        html-math-method: mathml
lang: zh-TW
---


## Linear Regression

在開始之前，請確保你安裝了必要的 Python 套件，如 **statsmodels** 和 **scikit-learn**。你可以使用以下命令安裝：
```{python}
#| eval: false
pip install statsmodels scikit-learn 
```

首先，我們需要匯入分析和繪圖所需的套件。
```{python}
# 匯入必要的套件
import os  # 用於作業系統相關的操作
import pandas as pd  # 用於處理和分析資料的資料框架工具
import numpy as np  # 用於數學計算，特別是陣列處理
from matplotlib import pyplot as plt  # 用於繪製圖表
```

接下來，我們會從網路讀取一個 CSV 檔案，這份檔案包含了不同廣告費用（`TV`、`radio`、`newspaper`）對銷售額的影響。這是我們的資料集，會用來進行後續的分析。
```{python}
# 從網路讀取 CSV 檔案並載入至 pandas DataFrame
adv_df = pd.read_csv('https://raw.githubusercontent.com/PingYangChen/DS-pytutorial/refs/heads/main/sample_data/Advertising.csv')
# 顯示資料集的前 5 行
adv_df.head(5)
# 計算資料集的總行數
len(adv_df)
# 儲存資料集中的欄位名稱
adv_var = adv_df.columns
# 顯示 TV、radio 和 newspaper 的統計摘要（不包含第一個欄位）
adv_df[adv_var[1:]].describe()
```

接下來，我們會用 `matplotlib` 繪製圖表，將 `TV`、`radio` 和 `newspaper` 的廣告費用與銷售額進行視覺化分析。這有助於我們理解不同變數之間的關係。
```{python}
#| warning: false
#| fig-align: 'center'
# 建立圖表，設置大小為12x5英吋
fig = plt.figure(figsize=(8, 3))
# 在第一個子圖中繪製 TV 廣告費用與銷售額的關係圖
ax = plt.subplot(1, 3, 1)
ax.plot(adv_df['TV'], adv_df['sales'], marker='.', linestyle='', color='#A00000')  # 繪製散點圖
ax.set_xlabel("TV", fontsize=14)  # 設置X軸標籤
ax.set_ylabel("sales", fontsize=14)  # 設置Y軸標籤
# 在第二個子圖中繪製 radio 廣告費用與銷售額的關係圖
ax = plt.subplot(1, 3, 2)
ax.plot(adv_df['radio'], adv_df['sales'], marker='.', linestyle='', color='#A00000')
ax.set_xlabel("radio", fontsize=14)
ax.set_ylabel("sales", fontsize=14)
# 在第三個子圖中繪製 newspaper 廣告費用與銷售額的關係圖
ax = plt.subplot(1, 3, 3)
ax.plot(adv_df['newspaper'], adv_df['sales'], marker='.', linestyle='', color='#A00000')
ax.set_xlabel("newspaper", fontsize=14)
ax.set_ylabel("sales", fontsize=14)
# 自動調整子圖間的間距
fig.tight_layout()
# 顯示圖表
fig.show()
```

現在，我們將使用 **statsmodels** 進行統計建模。首先，將目標變數 `sales` 存儲為變數 `y`。
```{python}
# 匯入 statsmodels 用於統計建模
import statsmodels.api as sm
# 將 'sales' 欄位的值存為目標變數 y
y = adv_df['sales'].values
```

接下來，我們要進行簡單線性迴歸分析。將 `TV` 廣告費用作為自變數，並嘗試建立一個迴歸模型。
```{python}
# 將 'TV' 欄位的值存為自變數 x1
x1 = adv_df['TV'].values
```

我們將使用 **statsmodels** 進行線性迴歸，並生成模型的摘要，這將告訴我們模型的參數和統計顯著性。
```{python}
# 使用 statsmodels 進行簡單線性迴歸，並建立模型
slr_sm = sm.OLS(y, sm.add_constant(x1)).fit()
# 顯示迴歸模型摘要
slr_sm.summary()
```


現在，我們進行多元線性迴歸。這次我們使用 `TV`、`radio` 和 `newspaper` 廣告費用作為自變數，來預測銷售額。
```{python}
# 進行多元線性迴歸，將 TV、radio 和 newspaper 的廣告費用設為自變數
x = adv_df[['TV', 'radio', 'newspaper']].values
```

建立多元線性迴歸模型，並顯示模型的摘要來檢查所有自變數對銷售額的影響。
```{python}
# 建立多元線性迴歸模型
mlr_sm = sm.OLS(y, sm.add_constant(x)).fit()
# 顯示多元線性迴歸模型摘要
mlr_sm.summary()
```

接著，我們嘗試預測一個新的觀察值，假設某個新的廣告費用分配（`TV`: 100000、`radio`: 20000、`newspaper`: 1000），我們將使用模型來預測銷售額。
```{python}
# 預測一個新的觀察值，廣告費用分別是 TV: 100000, radio: 20000, newspaper: 1000
x_new = np.array([[1, 100000, 20000, 1000]], dtype=float)
# 使用多元線性迴歸模型進行預測
mlr_sm.predict(x_new)
```

我們可以進一步查看預測的詳細結果，包含預測值的區間範圍等。
```{python}
# 獲取預測的詳細結果
mlr_sm_pred = mlr_sm.get_prediction(x_new)
mlr_sm_pred.summary_frame()
```

### Scikit-learn
現在，我們切換到使用 **sklearn** 進行線性迴歸，這是另一個流行的迴歸分析工具。首先，匯入 `LinearRegression。`
```{python}
# 使用 sklearn 進行線性迴歸
from sklearn.linear_model import LinearRegression
```

同樣，我們定義自變數和目標變數，這裡我們使用 `TV`、`radio` 和 `newspaper` 廣告費用作為自變數，銷售額作為目標變數。
```{python}
# 自變數為 TV, radio 和 newspaper
x = adv_df[['TV', 'radio', 'newspaper']].values
# 目標變數為 sales
y = adv_df['sales'].values
```

建立線性迴歸模型並進行擬合，這會訓練模型來預測銷售額。
```{python}
#| message: false
# 建立線性迴歸模型
mdl_sk = LinearRegression(fit_intercept=True)
# 使用 sklearn 進行模型擬合
mdl_sk.fit(x, y)
```

我們可以獲取模型的截距和每個變數的係數，這些係數告訴我們每增加一單位廣告費用時，銷售額的變化量。
```{python}
# 獲取截距項
mdl_sk.intercept_
# 獲取迴歸係數
mdl_sk.coef_
```

最後，我們使用 `sklearn` 模型來預測同樣的新觀察值（`TV`: 100000、`radio`: 20000、`newspaper`: 1000），並查看預測結果。
```{python}
# 預測一個新的觀察值，廣告費用分別是 TV: 100000, radio: 20000, newspaper: 1000
x_new = np.array([[100000, 20000, 1000]], dtype=float)
# 使用多元線性迴歸模型進行預測
mdl_sk.predict(x_new)
```

