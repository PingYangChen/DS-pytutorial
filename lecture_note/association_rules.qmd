---
title: "關聯式分析 Association Rules"
format: 
    html:
        html-math-method: mathjax
        url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
lang: zh-TW
---


## 關聯式分析簡介

關聯式分析（Association Rule Mining）是一種資料挖掘技術，旨在從大型資料集中找出項目之間的有趣模式或關聯規則。它主要應用於交易數據中，例如市場籃分析，幫助零售商識別哪些產品常一起購買，進而優化銷售策略。

**關聯式規則的基本概念**

- 項目集：一組項目，通常是一個交易中的購買品項。例如：{麵包, 牛奶}
- Support（支持度）
  - 衡量一個項目集在整個資料集中出現的頻率，描述某個項目集（如 $\{X, Y\}$）在所有交易中同時出現的比例。令 $N$ 為交易總數，則 $$ \text{Support}(\{X, Y\})= \frac{P(X \cap Y)}{N} $$
  - 支持度的主要作用是用來篩選**頻繁項目集**，即那些在交易中出現次數足夠多的項目集。較低的支持度可能意味著這個規則在資料集中並不具代表性。通常在應用 Apriori 演算法時會設置一個最小支持度閾值，只有超過這個閾值的項目集才會被保留作為頻繁項目集，從而提高演算法的效率。
- Confidence（信賴度）
  - 描述當項目集 $X$ 出現時，項目集 $Y$ 出現的機率，表示規則 $X \Rightarrow Y$ 的可靠性，能夠反映在 $X$ 出現的情況下，$Y$ 出現的可能性有多高。$$ \text{Confidence}(X \Rightarrow Y)= \frac{\text{Support}(X \cup Y)}{\text{Support}(X)} $$
  - 常用來篩選**有效關聯規則**。較高的信賴度表示當項目集 $X$ 出現時，項目集 $Y$ 很有可能也會出現，因此這個規則可能具有較強的預測能力。然而，信賴度有時可能誤導人們對規則強度的理解，特別是在某些項目集本身出現頻率較高的情況下。這時候引入**提升度（Lift）**能夠更好地衡量規則的重要性。
- Lift（提升度）
  - 衡量兩個項目之間的關聯性。它描述的是項目集 $X$ 和 $Y$ 同時出現的實際頻率與假設兩者獨立發生時期望頻率之間的比率。提升度考慮了項目集 $Y$ 出現的基準機率，從而提供了一個相對於隨機情況的衡量標準。提升度能更準確地反映項目集之間的真實關聯性，特別是當一些項目集本身出現頻率很高時，信賴度可能會高估其關聯性，而提升度能提供更準確的衡量。$$ \text{Lift}(X \Rightarrow Y)= \frac{\text{Confidence}(X \Rightarrow Y)}{\text{Support}(Y)} = \frac{\text{Support}(X \cap Y)}{\text{Support}(X)\times\text{Support}(Y)} $$
  - 提升度 = 1：表示 $X$ 和 $Y$ 之間沒有關聯，這意味著 $X$ 和 $Y$ 的同時出現完全是隨機的。
  - 提升度 > 1：表示 $X$ 和 $Y$ 之間存在 正相關，即當 $X$ 出現時，$Y$ 也更有可能出現。
  - 提升度 < 1：表示 $X$ 和 $Y$ 之間存在 負相關，即 $X$ 出現時，$Y$ 出現的可能性較低。
​

Apriori 演算法是關聯式規則挖掘中最常見的方法之一，利用「自底向上」的方法來識別頻繁項目集。這個算法的核心思想是，若某個項目集是不頻繁的，則它的所有超集也必然是不頻繁的。Apriori 演算法的兩個核心步驟是：

- 生成候選項目集：
  - 首先，從每個單一項目開始，將支持度高於閾值的項目保留下來。接下來，將這些頻繁項目集進行組合，生成更大的候選項目集。這一過程會持續進行，直到無法生成新的候選項目集。
- 剪枝（Prune）：
  - 根據支持度閾值，將支持度低於閾值的項目集剪除。這一剪枝過程的核心是依據「反單調性」的屬性，即如果一個項目集是不頻繁的，那麼它的所有超集也必然是不頻繁的。因此，可以避免生成不必要的超集來提高運算效率。

方法論細節請參考上課簡報。


## Python 關聯式分析範例實作

在 Python 語言中，有兩個常用的關聯式分析套件，分別為 `apyori` 和 `mlxtend`。

- `apyori`：適合用於小規模數據集的快速和簡單的關聯規則挖掘，且不需要過多的數據預處理或額外的分析步驟。輸入資料只需以串列呈現，無需額外預處理動作，如 one-hot encoding。在執行過程中，`apyori` 會返回已生成的關聯規則，包含支持度和信賴度的值，但由於輸出的結果較為簡單，可能需要額外的處理來進行進一步的分析。
- `mlxtend`：適合需要更大靈活性、擴展性及處理大規模資料集的用戶，特別是在需要生成複雜規則或進行更深入的分析時。使用 `mlxtend` 時，數據需要轉換為 one-hot encoding 格式，在預處理階段多少會增加些操作步驟，但這樣的設計讓 `mlxtend` 可以是用於更多樣化的資料集。此外，其接口簡潔明瞭，支援以 `DataFrame` 形式輸出結果，方便後續的分析和視覺化操作。

本節首先以較少量的購物車資料，說明這兩個套件的使用方式。

```{python}
import pandas as pd
import numpy as np
```

以 `pandas` 讀取講義附的購物車小資料 `groceries_small.csv`。

```{python}
# 從指定的網址讀取 CSV 檔案，該檔案包含購物數據，並存入變數 g_small 中
g_small = pd.read_csv('https://raw.githubusercontent.com/PingYangChen/DS-pytutorial/refs/heads/main/sample_data/groceries_small.csv')
print(g_small.columns)
print(g_small.head(10))
```

資料共有兩個欄位：

- `'TransactionID'`：帳單編號，編號一樣的資料屬於同一筆帳單。
- `'Item'`：購物明細，一筆帳單有多筆品項時，以多列儲存。

```{python}
print(len(g_small))
print(g_small['TransactionID'].unique())
```

整份資料有 24 筆購物紀錄，由 8 個帳單所構成。

```{python}
print(g_small['Item'].unique())
```

資料配的品項共有八種：`'T-Shirt'`、`'Pants'`、`'Jeans'`、`'Jersy'`、`'Socks'`、`'Basketball'`、`'Bottle'`、`'Shorts'`。長條圖 bar plot 呈現各品項的購買頻率，其中 `'Jersy'` 及 `'Basketball'` 的購買次數較高，各有 4 單購買此品項）。

```{python}
#| warning: false
#| fig-align: 'center'
print(g_small['Item'].value_counts())
# 檢視各品項的購買頻率
import seaborn as sns
sns.countplot(data=g_small, x='Item')
```


### 關聯式分析 `apyori` 套件實作


引入 `apyori` 套件。
```{python}
import apyori
```

一般而言，python 套件開發的同時也會提供 API 文件供使用者查找套件功能及使用方法。然而，套件功能較單一的開發者卻未必會提供該文件，往往只呈現個操作範例在自己的網頁上，若想知道更細節的套件功能使用方法，在無文件輔助之下，可能僅能翻找原始碼中的註解。例如 `apyori` 的作者便只在自己的 Github 主頁上寫個範例，無細節使用說明 [https://github.com/ymoch/apyori/tree/master](https://github.com/ymoch/apyori/tree/master)，但可耐心地從作者的原始碼中找到套件有哪些設定可以操作，如下圖。

![](/fig/apyori_api.png)


`apyori` 輸入資料的格式為串列，串列的每個元素為「一筆帳單」。
```{python}
#| warning: false
#| eval: false
# apyori 輸入資料的格式
[
    ['Item1', 'Item2', 'Item3'],
    ['Item6', 'Item1'],
    ['Item3', 'Item5', 'Item7', 'Item8', 'Item2'],
    ['Item1', ...],
    ...
]
```

對於剛才讀取的購物車小資料 `g_small`，我們首先得將這 8 筆帳單資料整理成如上格式，才能使用 `apyori` 進行關聯式分析，作法之一如下。

```{python}
#| warning: false
### 欲使用 apyori 套件的資料前處理
# 根據 TransactionID 將數據進行分組，每組代表一個交易
gsm_group = g_small.groupby('TransactionID')
# 將每個交易中的購買項目列表化，生成交易列表，列表中的每個元素代表一次交易的所有項目
gsm_listed = [gsm_group['Item'].get_group(ele).tolist() for ele in gsm_group.groups]
gsm_listed
```

如此資料便已轉換為串列格式，且一個元素為一筆帳單的內容。接著，使用 `apyori` 套件的 `apriori` 函數進行 Apriori 演算法分析，可設定的分析參數為：

- `min_support`:  關聯規則的最小支持度 (float)。
- `min_confidence`: 關聯規則的最小信賴度 (float)。
- `min_lift`: 關聯規則的最小提升度 (float)。
- `max_length`: 關聯規則的最大項目集長度 (integer)。


```{python}
#| warning: false
# 使用 apyori 套件進行 Apriori 演算法分析，指定最小支持度、信賴度、提升度和最大項目組的長度
asso_rules = apyori.apriori(transactions = gsm_listed, 
                            min_support=0.2, min_confidence=0.2, min_lift=2, max_length=2
)
# 試著直接 print 結果
print(asso_rules)
# 將產生的關聯規則轉換為串列，便於觀察結果及後續對逐項規則迭代處理
asso_rules_list = list(asso_rules)
```

執行 `apyori.apriori` 後，會回傳一個套件開發者自定義的 RelationRecord 生成器，無法直接呼叫出來檢視或做其他利用。因此，我們得自行將 `apyori.apriori` 產出的結果轉換為串列，如上 `list(asso_rules)`。這時便可檢視串列內容，例如 print 出第一個元素來看看。

```{python}
#| warning: false
asso_rules_list[0]
```

輸出結果的第一個元素，看起來是針對一組項集（itemset），收錄對此項集計算產生的所有關聯規則結果，往下慢慢拆解可看到以下結構。

```{python}
#| warning: false
print(asso_rules_list[0][0]) # itemset 項集 'Basketball', 'Socks'
print(asso_rules_list[0][1]) # Support 支持度
print(asso_rules_list[0][2]) # 關聯規則列表
# 此項集含兩個 items，因此有兩個關聯規則：
print(asso_rules_list[0][2][0]) # 關聯規則 'Basketball' -> 'Socks' 的資訊
print(asso_rules_list[0][2][1]) # 關聯規則 'Socks' -> 'Basketball' 的資訊
# 來檢視其中第一個關聯規則的內容
print(asso_rules_list[0][2][0][0]) # 先買的項目 'Basketball'
print(asso_rules_list[0][2][0][1]) # 加入購物車的項目 'Socks'
print(asso_rules_list[0][2][0][2]) # Confidence 信賴度
print(asso_rules_list[0][2][0][3]) # Lift 提升度
```

弄清楚輸出結果的結構後，便可設計如何迭代處理每一條關聯規則，並輸出相關信息。

```{python}
#| warning: false
# 迭代處理每一條關聯規則，並輸出相關信息
for ele in asso_rules_list:
    pair = ele[0] # 提取項目組
    products = [x for x in pair] # 將項目組中的項目轉換為列表
    print(products) # 列出兩個關聯項目，例如 ['Basketball', 'Socks']
    for arules in ele[2]:
        print("----------------------------------")  # 分隔線，便於視覺上讀取結果
        print("Rule: %s → %s" % (
            list(arules[0])[0], list(arules[1])[0])) # 輸出規則的格式，例如 "Basketball → Socks"
        print("Support: %s" % str(ele[1]))           # 輸出支持度，例如 "Support: 0.5"
        print("Confidence: %s" % str(arules[2]))     # 輸出信賴度，例如 "Confidence: 0.7"
        print("Lift: %s" % str(arules[3]))           # 輸出提升度，例如 "Lift: 3.0"
    print("==================================")      # 分隔線，便於視覺上讀取結果
```

或透過迭代處理將結果儲存成 `DataFrame`。

```{python}
#| warning: false
# 創建一個空的 DataFrame，包含 'Rule', 'Support', 'Confidence', 'Lift' 
# 四個欄位，用於存儲關聯規則的資訊
asso_rules_df = pd.DataFrame(columns=['Rule', 'Support', 'Confidence', 'Lift'])
ct = 0 # 設置計數器，用於記錄每條規則的索引
for ele in asso_rules_list:
    pair = ele[0] # 提取項目組

    # 迭代每條關聯規則的詳細資訊（支持度、信賴度和提升度）
    for arules in ele[2]:
        # 將規則及其支持度、信賴度和提升度存儲到 DataFrame 中
        asso_rules_df.loc[ct] = [
            "%s → %s" % (list(arules[0])[0], list(arules[1])[0]), # 將關聯規則格式化為 "項目A → 項目B"
            ele[1],    # 支持度
            arules[2], # 信賴度
            arules[3]  # 提升度
        ]
        ct += 1 # 增加計數器，為下一條規則準備

# 輸出 DataFrame，顯示所有關聯規則及其支持度、信賴度和提升度
print(asso_rules_df)
```

接著便可對此 `DataFrame` 進行重新排序，以不同角度觀察最有利於商業決策的關聯規則，例如：

- 根據 'Confidence' 欄位對關聯規則進行排序，從高到低排列，並輸出結果。這樣可以找到信賴度最高的規則，表示這些規則在實際數據中具有更高的預測準確性。
- 根據 'Lift' 欄位對關聯規則進行排序，從高到低排列，並輸出結果。提升度表示規則中 X 和 Y 之間的關聯強度，排序後可以發現關聯性最強的規則。

```{python}
#| warning: false
print(asso_rules_df.sort_values('Confidence', ascending=False))
```

```{python}
#| warning: false
print(asso_rules_df.sort_values('Lift', ascending=False))
```

### 關聯式分析 `mlxtend` 套件實作

`mlxtend`（Machine Learning Extensions）是個多用途的 Python 機器學習套件。該套件以類似 `scikit-learn` 的語法風格擴展出一些分類器、迴歸器、特徵選擇等資料科學工具。此外，`mlxtend` 也是少數提供關聯規則挖掘模組的套件，如 Apriori 和 FP-Growth 演算法，因為其 I/O 設計較為泛用，加上對結構化資料輸入格式的要求，使其較適合從大型資料集中挖掘頻繁項目集與關聯規則。完整的使用說明 API 文件也能從官方網站找到，便於使用者執行資料分析工作 [https://rasbt.github.io/mlxtend/](https://rasbt.github.io/mlxtend/)。

在此，我們仍然使用講義附的購物車小資料 `groceries_small.csv` 示範 `mlxtend` 套件執行關聯式分析的使用方式與結果解讀。

```{python}
#| warning: false
# 從 mlxtend 套件中匯入 apriori 演算法和關聯規則生成方法
from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import association_rules
```


`mlxtend` 的 `apriori` 關聯式分析函數輸入資料的格式為結構化資料，即表格型資料，資料的每一列為「一筆帳單」。對於購物車這種每筆帳單內品項數量不一的資料，可透過 One-hot encoding 來建構輸入資料。

首先從原始資料的 `'Item'` 欄位透過 `pd.Dataframe.unique()` 取得資料的品項有哪些，使 One-hot encoded 的表格資料欄位數**等於**資料的品項個數。以下為示範程式，建立一個空表格，固定欄位為品項名稱。

```{python}
#| warning: false
# 提取所有不同的品項名稱，並將其存為串列
uni_items = g_small['Item'].unique().tolist()
# 創建一個空的 DataFrame，欄位名稱為品項名稱，用來進行 one-hot encoding
g_small_encoded = pd.DataFrame(columns=uni_items)
g_small_encoded
```

One-hot encoded 表格資料的一列為一筆帳單，當該帳單有 A 品項時，則在此列 A 品項欄位註記 `1`，反之，註記 `0`。示範程式如下，將原始資料依照帳單 `TransactionID` 分組後，透過迭代每筆帳單，依照帳單內容品項標記。

```{python}
#| warning: false
# 根據交易 ID 將購物資料按交易進行分組
gsm_group = g_small.groupby('TransactionID')
# 將每個交易中的購買項目轉換為串列形式
gsm_listed = [gsm_group['Item'].get_group(ele).tolist() for ele in gsm_group.groups]
# 使用 one-hot encoding 轉換每個交易項目
for i in range(len(gsm_listed)):
    g_small_encoded.loc[i] = 0                # 將每一列的初始值設為 0
    g_small_encoded.loc[i, gsm_listed[i]] = 1 # 將購買的品項標記為 1

# 檢視轉換後的 one-hot encoding 資料
print(g_small_encoded)
```

使用 `mlxtend` 提供的 `apriori` 演算法，挖掘出頻繁項目集，在此例中，設定最小支持度為 0.2。

```{python}
#| warning: false
# 使用 apriori 演算法來挖掘頻繁項目集，最小支持度為 0.2
Support_items = apriori(g_small_encoded, min_support=0.20, use_colnames=True)
Support_items
```

根據頻繁項目集生成關聯規則，對照前一節使用 `apyori` 套件生成規則需要自行編程，`mlxtend` 可直接透過指令產生關聯規則結果，並可指定用於排序、篩選的指標。在此例中，考慮以提升度（lift）為評估標準，提升度閾值設定為 1，表示只考慮那些提升度大於等於 1 的規則。

```{python}
#| warning: false
# 根據頻繁項目集生成關聯規則，使用 'lift' 來作為評估指標，提升度閾值設為 1
Association_Rules = association_rules(Support_items, metric='lift', min_threshold=1)
# 檢視生成的關聯規則
Association_Rules
```

補充說明 `mlxtend` 在關聯式分析中的優勢。除了常見的支持度（Support）、信賴度（Confidence）、提升度（Lift）等指標外，`mlxtend` 還提供一些較為進階的度量工具，如 leverage、conviction 和 zhangs_metric，可以用來更深入理解關聯規則的有效性與影響力。

- Leverage（杠桿率）
  - 衡量品項 $X$ 和品項 $Y$ 同時出現的實際頻率與假設它們是獨立事件時的期望頻率之間的差異，用來確定品項之間的共現頻率與期望之間的偏差程度，有助於識別那些共現比隨機共現更頻繁的品項。$$ \text{Leverage}(X\Rightarrow Y) = P(X \cap Y) − P(X)\times P(Y) $$
  - Leverage 值的範圍在 [-1, 1] 之間，0 表示 X 和 Y 之間沒有關聯（完全獨立）；正值表示 X 和 Y 之間存在正相關；負值表示兩者之間存在負相關。
- Conviction（信念值）
  - 衡量如果項目 $X$ 發生但項目 $Y$ 不發生的機率，與當兩者獨立時該概率之間的對比。與提升度不同，強調的是規則的**逆否命題**（即在 $X$ $發生時，Y$ 不發生的概率），對於理解項目集 $X$ 和 $Y$ 之間的**反向關聯**非常有幫助，特別是在尋找「當 $X$ 發生但 $Y$ 不發生」的模式時。$$ \text{Conviction}(X\Rightarrow Y) = \frac{1 - P(Y)}{1 - \text{confidence}(X\Rightarrow Y)} $$
  - Conviction 的值越大，表示規則的強度越高。當 Conviction 值接近 1 時，表示這個規則不具備很高的預測力（與隨機無異）。
- Zhang's Metric（張氏度量）
  - 是一種更為穩健的度量方法，用來評估兩個事件 $X$ 和 $Y$ 是否有實質關聯的度量，旨在避免提升度在某些情況下的誤導性結果。Zhang’s Metric 主要解決的是當兩個事件有不同的基數（即它們的單獨出現頻率差異很大）時，提升度可能無法準確反映它們之間的真實關聯，在事件基數差異較大時仍能有效評估項目之間的相關性。$$ \text{Zhang}(X\Rightarrow Y) = \frac{P(X \cap Y) - P(X)\times P(Y)}{\max{\{P(X \cap Y), P(X)\times P(Y)\}}} $$
  - Zhang's Metric 值的範圍在 [-1, 1] 之間，1 表示項目之間存在完美的正相關；0 表示項目之間不存在相關性；-1 表示存在完美的負相關。


## 大型購物車資料分析範例

```{python}
import pandas as pd
g_big = pd.read_csv('https://raw.githubusercontent.com/PingYangChen/DS-pytutorial/refs/heads/main/sample_data/groceries.csv', header=None, delimiter='*')
```

## 大樂透獎號關聯式分析研究






